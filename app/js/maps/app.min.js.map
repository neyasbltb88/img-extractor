{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/js/app.js","app/js/libs/CSSinJSON/app/js/css-in-json.js","app/js/libs/CSSinJSON/app/js/modules/extend.js","app/js/modules/img-extractor.js","app/js/modules/interface-templates.js","app/js/modules/interface.js","node_modules/downloadjs/download.js"],"names":[],"mappings":"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":"../app.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import ImgExtractor from './modules/img-extractor.js'\r\n\r\n/////////////////////////////////////////////////////////\r\n// https://ru.wikipedia.org/wiki/Список_MIME-типов\r\n\r\n\r\n\r\nwindow.imgExtractor = new ImgExtractor({\r\n    // container: '.item.first',\r\n    rename: {\r\n        // prefix: 'pref_',\r\n        // suffix: '_suf'\r\n    },\r\n    // autodownload: true\r\n});\r\n\r\n// console.log(window.imgExtractor.getElements());\r\n// console.log(window.imgExtractor.getItems());\r\n\r\n\r\nconsole.log(imgExtractor);\r\n\r\n// window.imgExtractor.downloadAll();","import Extend from './modules/extend';\r\n\r\n\r\nclass CSSinJSON {\r\n    constructor(options = {}) {\r\n        this.elems_selector = []; // Селекторы базовых элементов\r\n        this.scoped_elems = []; // Сами базовые элементы\r\n        this.scoped = false; // Флаг изоляции стилей\r\n        this.style_obj = {}; // Объект стилей\r\n        this.scopedId = ''; // Здесь будет сгенерированный id для изоляции стилей\r\n        this.style_string = ''; // Здесь будут сгенерированные стили в виде строки\r\n        this.indent = 4;\r\n\r\n\r\n        this.Extend = Extend; // Плагин объединения объектов\r\n\r\n\r\n        // Точка входа, принимает селектор(ы) базовых элементов\r\n        this.init(options.scopedElem, options.style);\r\n    }\r\n\r\n    // Генератор рандомного числа\r\n    rand(min, max) {\r\n        let rand = Math.floor(min + Math.random() * (max + 1 - min));\r\n        return rand;\r\n    }\r\n\r\n    // Конвертер camelCase в cebab-case\r\n    camelToKebab(camel) {\r\n        return camel.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n    }\r\n\r\n    // TODO: разобраться с этим методом\r\n    // Метод расширения стилей, пока работает не правильно\r\n    extend(obj1, obj2) {\r\n        this.style_obj = this.Extend(obj1, obj2);\r\n        this.style_string = this.jsonToStyle(this.style_obj, this.scopedId);\r\n        this.updateStyleInject(this.style_string, this.scopedId);\r\n\r\n        return this.style_string;\r\n    }\r\n\r\n    // Вставка новых стилей в готовый элемент style\r\n    updateStyleInject(style_content, scoped) {\r\n        let stl = document.querySelector(`#${scoped}`);\r\n        stl.textContent = style_content;\r\n    }\r\n\r\n    removeStyle(parent = document.head, scoped = this.scopedId) {\r\n        let style_elem = document.querySelector(`#${scoped}`);\r\n        if (style_elem) {\r\n            parent.removeChild(style_elem);\r\n            this.scoped_elems.forEach(elem => elem.removeAttribute('data-scoped'));\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    addStyle() {\r\n        let style_elem = document.querySelector(`#${this.scopedId}`);\r\n        if (!style_elem) {\r\n            this.injectStyle(this.style_string, document.head, 'CSSinJSON_style', this.scopedId);\r\n            this.addScopedAttr(this.scoped_elems);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Создание нового элемента style и заполнение его атрибутами и стилями\r\n    injectStyle(style_content = this.style_string, elem = document.head, class_name = 'CSSinJSON_style', scoped = this.scopedId) {\r\n        let stl = document.createElement('style');\r\n        stl.id = scoped;\r\n        stl.className = class_name;\r\n        stl.textContent = style_content;\r\n        elem.appendChild(stl);\r\n    }\r\n\r\n    // Подготовка селектора к использованию в регулярке\r\n    prepareSelector(selector) {\r\n        return selector.replace(/([\\.\\#])/gmi, '\\\\$1');\r\n    }\r\n\r\n    // Метод обработки селекторов для scoped-режима\r\n    // Если селектор соответствует базовому, к нему допишется атрибут scoped\r\n    // Если селектор не соответствует базовому, то он будет наследоваться от атрибута scoped\r\n    scopeSelector(selector, str, scoped_attr) {\r\n        if (selector === this.prepareSelector(selector) && str !== 'body') {\r\n            return `${scoped_attr} ${str}`;\r\n        } else if (str === 'body') {\r\n            return str;\r\n        }\r\n        let reg_str = `(?:^|[^\\\\ \\\\t])(${this.prepareSelector(selector)})(?=$|[\\\\s\\\\.\\\\#>])`;\r\n        let regex = new RegExp(reg_str, 'gm');\r\n\r\n        let match, matches, str_before, str_after, lastIndex;\r\n        while ((match = regex.exec(str)) !== null) {\r\n            if (match.index === regex.lastIndex) {\r\n                regex.lastIndex++;\r\n            }\r\n\r\n            matches = match.slice();\r\n\r\n            lastIndex = regex.lastIndex;\r\n            str_before = str.slice(0, regex.lastIndex - match[1].length);\r\n            str_after = str.slice(regex.lastIndex);\r\n\r\n            str = str_before + match[1].replace(regex, '$1' + scoped_attr) + str_after;\r\n            regex.lastIndex += scoped_attr.length;\r\n        }\r\n\r\n        // console.log('lastIndex: ', lastIndex);\r\n        str = (lastIndex === undefined) ? `${scoped_attr} ${str}` : str;\r\n\r\n\r\n        return str;\r\n    }\r\n\r\n    // Метод для генерации селекторов с атрибутом scoped.\r\n    // Разбирает несколько селекторов, указанных через запятую\r\n    scopedSelectorGenerate(selector) {\r\n        let regex = /(,\\s*\\n*\\t*)/gm;\r\n        let selector_arr = selector.split(regex).filter(selector => (selector.search(regex) === -1) ? true : false);\r\n        let scoped_attr = `[data-scoped=${this.scopedId}]`;\r\n        let new_selector = '';\r\n\r\n        // Цикл по селекторам, указанным в стилях через запятую\r\n        selector_arr.forEach(selector => {\r\n            // Если надо генерировать изолированные стили\r\n            if (this.scoped) {\r\n\r\n                // Цикл по каждому базовому селектору\r\n                let prev_inner_new_selector = '';\r\n                this.elems_selector.forEach(scoped_elem => {\r\n                    let inner_new_selector = '';\r\n                    inner_new_selector = this.scopeSelector(scoped_elem, selector, scoped_attr) + ',\\n';\r\n\r\n                    // Проверка на то, чтобы не дублировались селекторы, если они совпадают во внутреннем цикле\r\n                    if (prev_inner_new_selector !== inner_new_selector) {\r\n                        new_selector += inner_new_selector;\r\n                        prev_inner_new_selector = inner_new_selector;\r\n                    }\r\n                });\r\n\r\n                // Если НЕ надо генерировать изолированные стили\r\n            } else {\r\n                new_selector += `${selector},\\n`;\r\n            }\r\n        })\r\n\r\n        return new_selector.slice(0, -2);\r\n    }\r\n\r\n    // Генерирует строковые стили для одного селектора\r\n    objToStyle(selector, obj) {\r\n        let style = '';\r\n        for (let prop in obj) {\r\n            style += `\\n${' '.repeat(this.indent)}${this.camelToKebab(prop)}: ${obj[prop]};`\r\n        }\r\n\r\n        return `${this.scopedSelectorGenerate(selector)} {${style}\\n}`;\r\n\r\n\r\n    }\r\n\r\n    // Генерирует полные стили по входящему объекту\r\n    jsonToStyle(json) {\r\n        let style = '';\r\n        for (let selector in json) {\r\n            style += this.objToStyle(selector, json[selector]) + '\\n\\n';\r\n        }\r\n\r\n        return style;\r\n    }\r\n\r\n    // Вешает на базовые элементы scoped-атрибут для изоляции стилей\r\n    addScopedAttr(elems) {\r\n        elems.forEach(elem => elem.dataset.scoped = this.scopedId)\r\n    }\r\n\r\n    // Находит все элементы, указанные в качестве базовых, собирает эти элементы и\r\n    // их селекторы в соответствующие массивы \r\n    findScopedElems(selector) {\r\n        let elems_of_selector;\r\n        if (typeof selector === 'object') {\r\n            selector.forEach(element => {\r\n                this.elems_selector.push(element);\r\n                elems_of_selector = document.querySelectorAll(element);\r\n                if (elems_of_selector !== null) {\r\n                    elems_of_selector.forEach(elem => {\r\n                        // elem.dataset.scoped = this.scopedId;\r\n                        this.scoped_elems.push(elem);\r\n                    })\r\n                }\r\n            });\r\n        } else if (typeof selector === 'string') {\r\n            this.elems_selector.push(selector);\r\n            elems_of_selector = document.querySelectorAll(selector);\r\n\r\n            if (elems_of_selector !== null) {\r\n                elems_of_selector.forEach(elem => {\r\n                    // elem.dataset.scoped = this.scopedId;\r\n                    this.scoped_elems.push(elem);\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    scopedInit(selector) {\r\n        this.findScopedElems(selector);\r\n        if (this.scoped_elems.length > 0) {\r\n            this.scoped = true;\r\n            this.addScopedAttr(this.scoped_elems);\r\n        }\r\n    }\r\n\r\n    // Генератор id для изоляции стилей - строка 10 символов в диапазоне a-z\r\n    scopedIdGenerate() {\r\n        let id = '';\r\n        for (let i = 0; i < 10; i++) {\r\n            id += String.fromCharCode(this.rand(97, 122));\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    // Если получен JSON, то он парсится в объект\r\n    prepareStyle(style) {\r\n        if (typeof style === 'string') {\r\n            try { this.style_obj = JSON.parse(style) } catch (err) { console.error('CSSinJSON: JSON.parse(style) error') }\r\n        } else if (typeof style === 'object') {\r\n            this.style_obj = style;\r\n        }\r\n    }\r\n\r\n\r\n    init(selector, style) {\r\n        // Если получен JSON, то он парсится в объект\r\n        this.prepareStyle(style)\r\n            // Сгенерировать scopedId\r\n        this.scopedId = this.scopedIdGenerate();\r\n        // Если нужно, инициализирует scoped-систему\r\n        this.scopedInit(selector);\r\n\r\n        // Сгенерировать строку стилей из полученного объекта\r\n        this.style_string = this.jsonToStyle(this.style_obj);\r\n\r\n        // Вставить сгенерированные стили на страницу\r\n        this.injectStyle(this.style_string, document.head, 'CSSinJSON_style', this.scopedId);\r\n    }\r\n}\r\n\r\nwindow.CSSinJSON = CSSinJSON;","/*Функция из jQuery для объединения объектов\r\n * var newObj = extend(obj_1, obj_2);\r\n *\r\n * Для рекурсивного объединения\r\n * var newObj = extend(true, obj_1, obj_2);\r\n *\r\n * Работа функции изменяет первый объект obj_1\r\n * newObj === obj_1\r\n */\r\n\r\n\r\nexport default function extend() {\r\n    var options, name, src, copy, copyIsArray, clone,\r\n        target = arguments[0] || {},\r\n        i = 1,\r\n        length = arguments.length,\r\n        deep = false;\r\n    // Handle a deep copy situation\r\n    if (typeof target === \"boolean\") {\r\n        deep = target;\r\n        // Skip the boolean and the target\r\n        target = arguments[i] || {};\r\n        i++;\r\n    }\r\n    // Handle case when target is a string or something (possible in deep copy)\r\n    if (typeof target !== \"object\" && !isFunction(target)) {\r\n        target = {};\r\n    }\r\n    // Extend jQuery itself if only one argument is passed\r\n    if (i === length) {\r\n        target = this;\r\n        i--;\r\n    }\r\n    for (; i < length; i++) {\r\n        // Only deal with non-null/undefined values\r\n        if ((options = arguments[i]) != null) {\r\n            // Extend the base object\r\n            for (name in options) {\r\n                src = target[name];\r\n                copy = options[name];\r\n                // Prevent never-ending loop\r\n                if (target === copy) {\r\n                    continue;\r\n                }\r\n                // Recurse if we're merging plain objects or arrays\r\n                if (deep && copy && (isPlainObject(copy) ||\r\n                        (copyIsArray = Array.isArray(copy)))) {\r\n                    if (copyIsArray) {\r\n                        copyIsArray = false;\r\n                        clone = src && Array.isArray(src) ? src : [];\r\n                    } else {\r\n                        clone = src && isPlainObject(src) ? src : {};\r\n                    }\r\n                    // Never move original objects, clone them\r\n                    target[name] = extend(deep, clone, copy);\r\n                    // Don't bring in undefined values\r\n                } else if (copy !== undefined) {\r\n                    target[name] = copy;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function isPlainObject(obj) {\r\n        var proto, Ctor;\r\n        // Detect obvious negatives\r\n        // Use toString instead of jQuery.type to catch host objects\r\n        if (!obj || toString.call(obj) !== \"[object Object]\") {\r\n            return false;\r\n        }\r\n        proto = getProto(obj);\r\n        // Objects with no prototype (e.g., `Object.create( null )`) are plain\r\n        if (!proto) {\r\n            return true;\r\n        }\r\n        // Objects with prototype are plain iff they were constructed by a global Object function\r\n        Ctor = hasOwn.call(proto, \"constructor\") && proto.constructor;\r\n        return typeof Ctor === \"function\" && fnToString.call(Ctor) === ObjectFunctionString;\r\n\r\n        function getProto(obj) {\r\n            obj = obj || {};\r\n            return obj.getPrototypeOf;\r\n        }\r\n\r\n        function class2type() {\r\n            return {};\r\n        }\r\n\r\n        function hasOwn(class2type) {\r\n            return class2type.hasOwnProperty;\r\n        }\r\n\r\n        function fnToString(hasOwn) {\r\n            return hasOwn.toString;\r\n        }\r\n    }\r\n\r\n    // Return the modified object\r\n    return target;\r\n};","import Download from 'downloadjs';\r\nimport ImgExtractorInterface from './interface'\r\n\r\nexport default class ImgExtractor {\r\n    constructor(params = {}) {\r\n        this.container = params.container ? document.querySelector(params.container) : document;\r\n        this.name_prefix = (params.rename && params.rename.prefix) ? params.rename.prefix : '';\r\n        this.name_suffix = (params.rename && params.rename.suffix) ? params.rename.suffix : '';\r\n        this.default_name_ext = 'svg';\r\n        this.name_index = 0;\r\n\r\n        this.autodownload = params.autodownload;\r\n\r\n        this.elems = {};\r\n        this.items = [];\r\n\r\n        this.mime_type = {\r\n            svg: 'image/svg+xml',\r\n            png: 'image/png',\r\n            jpg: 'image/jpeg',\r\n            jpeg: 'image/jpeg',\r\n            tiff: 'image/tiff',\r\n            webp: 'image/webp',\r\n        }\r\n\r\n        this.interface = null;\r\n\r\n\r\n        this.init();\r\n    }\r\n\r\n    _getTypeFilter() {\r\n        let filter = {};\r\n\r\n        for (let type in this.elems) {\r\n            filter[type] = true;\r\n        }\r\n\r\n        return filter;\r\n    }\r\n\r\n    _buildName(elem, ext = this.default_name_ext) {\r\n        let name = '';\r\n\r\n        if (elem.id) {\r\n            name = elem.id;\r\n        } else if (elem.classList.value !== '') {\r\n            name = elem.classList.value;\r\n        } else {\r\n            name = this.name_index++;\r\n        }\r\n\r\n        return `${this.name_prefix}${name}${this.name_suffix}.${ext}`;\r\n    }\r\n\r\n    // Метод, собирающий инлайновые svg со страницы\r\n    _collectInlineSvg() {\r\n        let ext = 'svg';\r\n        this.elems[ext] = this.container.querySelectorAll('svg');\r\n\r\n        this.elems[ext].forEach(elem => {\r\n            let item = {};\r\n\r\n            item.name = this._buildName(elem, ext);\r\n            item.content = elem.outerHTML;\r\n            item.ext = ext;\r\n\r\n            this.items.push(item);\r\n        });\r\n    }\r\n\r\n    // Метод загрузки всех собранных картинок\r\n    downloadAll() {\r\n        this.items.forEach(item => {\r\n            Download(item.content, item.name, this.mime_type[item.ext]);\r\n        })\r\n    }\r\n\r\n    // Метод получения элементов, содержащих картинки\r\n    getElements() {\r\n        return this.elems;\r\n    }\r\n\r\n    // Метод получения айтомов, содержащих объекты картинок, подготовленные к загрузке\r\n    getItems() {\r\n        return this.items;\r\n    }\r\n\r\n    init() {\r\n        // Запуск сбора инлайновых svg\r\n        this._collectInlineSvg();\r\n\r\n\r\n        // Если автоматический запуск скачивания всех найденных картинок включен,\r\n        if (this.autodownload) {\r\n            // то просто скачиваем их\r\n            this.downloadAll();\r\n\r\n            // Если автоматическое скачивание выключено, \r\n        } else {\r\n            // То инициализируем интерфейс\r\n            this.interface = new ImgExtractorInterface({\r\n                layout_id: 'img_extractor_interface',\r\n                items: this.getItems(),\r\n                filter: this._getTypeFilter(),\r\n            });\r\n\r\n            console.log(this.interface);\r\n\r\n        }\r\n\r\n    }\r\n}","export default class ImgExtractorInterfaceTemplates {\r\n    constructor(params = {}) {\r\n        this.colors = {\r\n            bg_container: 'rgba(0, 0, 0, .7)',\r\n            text: 'rgb(195, 207, 224)',\r\n            border: 'rgba(105, 109, 125, 0.4)',\r\n            accent: '#ffc000',\r\n            accent_alfa: 'rgba(255, 192, 0, .3)',\r\n        };\r\n\r\n    }\r\n\r\n    getLayoutTemplate() {\r\n        return `\r\n            <div class=\"interface_header\">\r\n                <div class=\"interface_hide\" title=\"Свернуть панель скачивания\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"${this.colors.text}\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                        <line x1=\"4\" y1=\"12\" x2=\"20\" y2=\"12\"/>\r\n                        <polyline points=\"14 6 20 12 14 18\"/>\r\n                    </svg>\r\n                </div>\r\n                <div class=\"header_text\">Выберите изображения для скачивания</div>\r\n            </div>\r\n            \r\n            <div class=\"interface_content\"></div>`;\r\n    }\r\n\r\n    getIcons() {\r\n        let icons = {\r\n            circleEmpty: '',\r\n            okCircled: '',\r\n        }\r\n    }\r\n\r\n    getFilterBtnTemplate(filter_name) {\r\n        let btn = document.createElement('div');\r\n        btn.className = 'filter_btn active';\r\n        btn.dataset.filter = filter_name;\r\n        btn.textContent = `.${filter_name}`;\r\n\r\n        return btn;\r\n    }\r\n\r\n    getListItem(item) {\r\n        return `<div>${item.name}</div>`;\r\n    }\r\n\r\n\r\n    getCommonStyle(vars) {\r\n        return {\r\n            // Контейнер интерфейса\r\n            [vars.layout_id]: {\r\n                backgroundColor: this.colors.bg_container,\r\n                boxShadow: `0 0 20px ${this.colors.bg_container}`,\r\n                color: this.colors.text,\r\n                fontFamily: 'sans-serif',\r\n                position: 'fixed',\r\n                maxWidth: '500px',\r\n                minWidth: '320px',\r\n                width: '40%',\r\n                height: '100vh',\r\n                boxSizing: 'border-box',\r\n                right: 0,\r\n                top: 0,\r\n                padding: '10px 15px',\r\n                transform: 'translate3d(0, 0, 1px)',\r\n                willChange: 'transform',\r\n                transition: 'all .25s ease-in-out',\r\n            },\r\n            [`${vars.layout_id}.close`]: {\r\n                transform: 'translate3d(100%, 0, 1px)',\r\n                boxShadow: 'none',\r\n            },\r\n\r\n            // Заголовок интерфейса\r\n            '.interface_header': {\r\n                display: 'flex',\r\n                borderBottom: '1px solid ' + this.colors.border,\r\n                marginBottom: '10px'\r\n            },\r\n            '.interface_hide': {\r\n                padding: '10px',\r\n                width: '28px',\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                cursor: 'pointer',\r\n                transition: 'transform .25s ease-in-out',\r\n            },\r\n            '.interface_hide svg': {\r\n                transition: 'transform .25s ease-in-out',\r\n            },\r\n            '.interface_hide:hover svg': {\r\n                stroke: '#fff'\r\n            },\r\n            [`${vars.layout_id}.close .interface_hide`]: {\r\n                'background-color': this.colors.bg_container,\r\n                'border-radius': '5px 0 0 5px',\r\n                transform: 'translate3d(calc(-100% - 15px), 0, 1px)',\r\n            },\r\n            [`${vars.layout_id}.close .interface_hide svg`]: {\r\n                transform: 'rotate(180deg)',\r\n            },\r\n            '.header_text': {\r\n                flexGrow: 1,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'space-around',\r\n            },\r\n            '.interface_content': {\r\n                overflowY: 'auto',\r\n            },\r\n\r\n            // Фильтр\r\n            '.filter_wrap': {\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                marginBottom: '10px'\r\n            },\r\n            '.filter_btn': {\r\n                border: '1px solid',\r\n                borderColor: this.colors.border,\r\n                borderRadius: '2px',\r\n                padding: '5px 10px',\r\n                cursor: 'pointer',\r\n                opacity: 0.8,\r\n                userSelect: 'none'\r\n            },\r\n            '.filter_btn.active': {\r\n                borderColor: this.colors.accent,\r\n                color: this.colors.accent,\r\n            },\r\n\r\n            // Список айтемов картинок\r\n            '.list_item': {\r\n                border: `1px solid`,\r\n                // borderColor: this.colors.border,\r\n                borderColor: 'transparent',\r\n                borderRadius: '3px',\r\n                padding: '15px',\r\n                marginBottom: '5px',\r\n                backgroundColor: this.colors.bg_container,\r\n                cursor: 'pointer',\r\n                opacity: 0.5\r\n            },\r\n            [`.list_item${vars.list_item_slected}`]: {\r\n                // borderColor: this.colors.accent_alfa,\r\n                borderColor: this.colors.border,\r\n                opacity: 1,\r\n            }\r\n\r\n\r\n\r\n        } // Конец стилей\r\n    }\r\n}","import '../libs/CSSinJSON/app/js/css-in-json';\r\nimport ImgExtractorInterfaceTemplates from './interface-templates';\r\n\r\nexport default class ImgExtractorInterface {\r\n    constructor(params = {}) {\r\n        let that = this;\r\n\r\n        this.layout_id = params.layout_id;\r\n        this.items = params.items;\r\n        this._filter = params.filter;\r\n\r\n        this.parts = {\r\n            layout: null,\r\n            header: null,\r\n            content: null,\r\n            filter: null,\r\n            list: null\r\n        };\r\n\r\n        this.list_item_slected = 'selected';\r\n\r\n        this.cssinjs = null;\r\n        this.template = new ImgExtractorInterfaceTemplates();\r\n\r\n        this.state = {\r\n            _opened: true,\r\n            set opened(val) {\r\n                if (typeof val === 'boolean') {\r\n                    this._opened = val;\r\n                    if (that.parts.layout) {\r\n                        val ? that.parts.layout.classList.remove('close') :\r\n                            that.parts.layout.classList.add('close');\r\n                    }\r\n                }\r\n            },\r\n            get opened() {\r\n                return this._opened;\r\n            }\r\n        };\r\n\r\n\r\n        // Точка входа\r\n        this.init();\r\n    }\r\n\r\n    _handlerListItemSelect(item) {\r\n        item.classList.toggle(this.list_item_slected);\r\n\r\n        // TODO: Здесь надо будет вызывать фильтрацию выбранных айтомов\r\n    }\r\n\r\n    _makeList() {\r\n        this.parts.list = document.createElement('div');\r\n        this.parts.list.className = 'list_wrap';\r\n\r\n        this.parts.content.appendChild(this.parts.list);\r\n    }\r\n\r\n    _renderListItems(category) {\r\n        let items = this.items.filter(item => item.ext === category);\r\n\r\n        items.forEach(item => {\r\n            let list_item = document.createElement('div');\r\n            list_item.className = `list_item ${this.list_item_slected}`;\r\n            list_item.innerHTML = this.template.getListItem(item);\r\n\r\n            list_item.addEventListener('click', e => {\r\n                this._handlerListItemSelect(e.currentTarget);\r\n            });\r\n\r\n            this.parts.list.appendChild(list_item);\r\n        });\r\n    }\r\n\r\n    _clearListItems() {\r\n        this.parts.list.innerHTML = '';\r\n    }\r\n\r\n    listRender(filter_name, clear = true) {\r\n        if (clear) this._clearListItems();\r\n\r\n        if (filter_name && this._filter[filter_name]) {\r\n            this._renderListItems(filter_name);\r\n        } else if (!filter_name) {\r\n            this._clearListItems();\r\n\r\n            for (let category in this._filter) {\r\n                if (this._filter[category]) {\r\n                    this._renderListItems(category);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Метод, создающий блок с кнопками фильтра\r\n    _makeFilter() {\r\n        this.parts.filter = document.createElement('div');\r\n        this.parts.filter.className = 'filter_wrap';\r\n\r\n        // Создаем кнопки по объекту фильтра\r\n        for (let filter_name in this._filter) {\r\n            let btn = this.template.getFilterBtnTemplate(filter_name);\r\n\r\n            // Вешаем на полученные кнопки обработчик переключения фильтра\r\n            btn.addEventListener('click', e => {\r\n                let elem = e.currentTarget;\r\n                let res = this.filter(elem.dataset.filter);\r\n                res ? elem.classList.add('active') : elem.classList.remove('active')\r\n            });\r\n\r\n            // Добавляем кнопку в контейнер\r\n            this.parts.filter.appendChild(btn);\r\n        }\r\n\r\n        // вставляем контейнер фильтра в интерфейс\r\n        this.parts.content.appendChild(this.parts.filter);\r\n    }\r\n\r\n    // Метод для изменения состояния фильтра\r\n    filter(name, val) {\r\n        if (val && typeof val === 'boolean') {\r\n            this._filter[name] = val;\r\n        } else if (val === undefined) {\r\n            this._filter[name] = !this._filter[name];\r\n        }\r\n\r\n        // TODO: Тут надо будет запускать рендер фильтрации\r\n        this.listRender();\r\n\r\n        return this._filter[name];\r\n    }\r\n\r\n    // Метод для сворачивания/разворачивания интерфейса\r\n    openToggle(e) {\r\n        this.state.opened = !this.state.opened;\r\n\r\n        if (e && this.state.opened) {\r\n            e.currentTarget.setAttribute('title', 'Свернуть ImgExtractor');\r\n        } else if (e && !this.state.opened) {\r\n            e.currentTarget.setAttribute('title', 'Развернуть ImgExtractor');\r\n        }\r\n    }\r\n\r\n    // Метод создания контейнера интерфейса\r\n    _makeLayout() {\r\n        this.parts.layout = document.createElement('div');\r\n        this.parts.layout.id = this.layout_id;\r\n        this.parts.layout.innerHTML = this.template.getLayoutTemplate();\r\n\r\n        // Сохраним в свойства шапку и контент интерфейса\r\n        this.parts.header = this.parts.layout.querySelector('.interface_header');\r\n        this.parts.content = this.parts.layout.querySelector('.interface_content');\r\n\r\n        // Вешаем обработчик на кнопку сворачивания/разворачивания интерфейса\r\n        this.parts.layout.querySelector('.interface_hide').addEventListener('click', e => {\r\n            this.openToggle(e);\r\n        });\r\n\r\n        document.body.appendChild(this.parts.layout);\r\n    }\r\n\r\n    init() {\r\n        // Создать контейнер интерфейса\r\n        this._makeLayout();\r\n\r\n        // Создаем блок фильтра\r\n        this._makeFilter();\r\n\r\n        // Создаем блок списка изображений\r\n        this._makeList();\r\n\r\n        // Заполняем блок списка айтемами\r\n        this.listRender();\r\n\r\n\r\n        // Добавить стили интерфейса на страницу, всегда в конце\r\n        this.cssinjs = new CSSinJSON({\r\n            style: this.template.getCommonStyle({\r\n                layout_id: '#' + this.layout_id,\r\n                list_item_slected: '.' + this.list_item_slected\r\n            }),\r\n            scopedElem: '#' + this.layout_id\r\n        });\r\n    }\r\n\r\n}","//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}