{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app/js/app.js","node_modules/downloadjs/download.js"],"names":[],"mappings":"AAAA;;;AC0IA;;;;;;;;;;AAEA;IAEM,Y;;;AACF,0BAAyB;AAAA,QAAb,MAAa,uEAAJ,EAAI;;AAAA;;AACrB,SAAK,SAAL,GAAiB,MAAM,CAAC,SAAP,GAAmB,QAAQ,CAAC,aAAT,CAAuB,MAAM,CAAC,SAA9B,CAAnB,GAA8D,QAA/E;AACA,SAAK,WAAL,GAAoB,MAAM,CAAC,MAAP,IAAiB,MAAM,CAAC,MAAP,CAAc,MAAhC,GAA0C,MAAM,CAAC,MAAP,CAAc,MAAxD,GAAiE,EAApF;AACA,SAAK,WAAL,GAAoB,MAAM,CAAC,MAAP,IAAiB,MAAM,CAAC,MAAP,CAAc,MAAhC,GAA0C,MAAM,CAAC,MAAP,CAAc,MAAxD,GAAiE,EAApF;AACA,SAAK,QAAL,GAAgB,KAAhB;AACA,SAAK,UAAL,GAAkB,CAAlB;AAEA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,SAAL,GAAiB,EAAjB,CARqB,CASrB;;AAEA,SAAK,SAAL,GAAiB;AACb,MAAA,GAAG,EAAE;AADQ,KAAjB;AAKA,SAAK,IAAL;AACH;;;;oCAEe;AAAA;;AACZ,WAAK,SAAL,CAAe,OAAf,CAAuB,UAAA,IAAI,EAAI;AAC3B,YAAI,IAAJ;;AAEA,YAAI,IAAI,CAAC,EAAT,EAAa;AACT,UAAA,IAAI,GAAG,IAAI,CAAC,EAAZ;AACH,SAFD,MAEO,IAAI,IAAI,CAAC,SAAL,CAAe,KAAf,KAAyB,EAA7B,EAAiC;AACpC,UAAA,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,KAAtB;AACH,SAFM,MAEA;AACH,UAAA,IAAI,GAAG,KAAI,CAAC,UAAL,EAAP;AACH;;AAED,QAAA,KAAI,CAAC,SAAL,CAAe,KAAI,CAAC,WAAL,GAAmB,IAAnB,GAA0B,KAAI,CAAC,WAA/B,GAA6C,GAA7C,GAAmD,KAAI,CAAC,QAAvE,IAAmF,IAAI,CAAC,SAAxF;AACH,OAZD;AAaH;;;kCAEa;AACV,WAAK,IAAM,IAAX,IAAmB,KAAK,SAAxB,EAAmC;AAC/B,iCAAS,KAAK,SAAL,CAAe,IAAf,CAAT,EAA+B,IAA/B,EAAqC,KAAK,SAAL,CAAe,KAAK,QAApB,CAArC;AACH;AACJ;;;2BAEM;AACH,WAAK,SAAL,GAAiB,KAAK,SAAL,CAAe,gBAAf,CAAgC,KAAhC,CAAjB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,KAAK,SAAjB;;AAEA,WAAK,aAAL;;AAEA,WAAK,WAAL;AACH;;;;;;AAGL,MAAM,CAAC,YAAP,GAAsB,IAAI,YAAJ,CAAiB;AACnC;AACA,EAAA,MAAM,EAAE,CACJ;AACA;AAFI;AAF2B,CAAjB,CAAtfile":"../app.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// function download(data, strFileName, strMimeType) {\r\n\r\n//     var self = window, // this script is only for browsers anyway...\r\n//         defaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\r\n//         mimeType = strMimeType || defaultMime,\r\n//         payload = data,\r\n//         url = !strFileName && !strMimeType && payload,\r\n//         anchor = document.createElement(\"a\"),\r\n//         toString = function(a) { return String(a); },\r\n//         myBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\r\n//         fileName = strFileName || \"download\",\r\n//         blob,\r\n//         reader;\r\n//     myBlob = myBlob.call ? myBlob.bind(self) : Blob;\r\n\r\n//     if (String(this) === \"true\") { //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\r\n//         payload = [payload, mimeType];\r\n//         mimeType = payload[0];\r\n//         payload = payload[1];\r\n//     }\r\n\r\n\r\n//     if (url && url.length < 2048) { // if no filename and no mime, assume a url was passed as the only argument\r\n//         fileName = url.split(\"/\").pop().split(\"?\")[0];\r\n//         anchor.href = url; // assign href prop to temp anchor\r\n//         if (anchor.href.indexOf(url) !== -1) { // if the browser determines that it's a potentially valid url path:\r\n//             var ajax = new XMLHttpRequest();\r\n//             ajax.open(\"GET\", url, true);\r\n//             ajax.responseType = 'blob';\r\n//             ajax.onload = function(e) {\r\n//                 download(e.target.response, fileName, defaultMime);\r\n//             };\r\n//             setTimeout(function() { ajax.send(); }, 0); // allows setting custom ajax headers using the return:\r\n//             return ajax;\r\n//         } // end if valid url?\r\n//     } // end if url?\r\n\r\n\r\n//     //go ahead and download dataURLs right away\r\n//     if (/^data\\:[\\w+\\-]+\\/[\\w+\\-]+[,;]/.test(payload)) {\r\n\r\n//         if (payload.length > (1024 * 1024 * 1.999) && myBlob !== toString) {\r\n//             payload = dataUrlToBlob(payload);\r\n//             mimeType = payload.type || defaultMime;\r\n//         } else {\r\n//             return navigator.msSaveBlob ? // IE10 can't do a[download], only Blobs:\r\n//                 navigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\r\n//                 saver(payload); // everyone else can save dataURLs un-processed\r\n//         }\r\n\r\n//     } //end if dataURL passed?\r\n\r\n//     blob = payload instanceof myBlob ?\r\n//         payload :\r\n//         new myBlob([payload], { type: mimeType });\r\n\r\n\r\n//     function dataUrlToBlob(strUrl) {\r\n//         var parts = strUrl.split(/[:;,]/),\r\n//             type = parts[1],\r\n//             decoder = parts[2] == \"base64\" ? atob : decodeURIComponent,\r\n//             binData = decoder(parts.pop()),\r\n//             mx = binData.length,\r\n//             i = 0,\r\n//             uiArr = new Uint8Array(mx);\r\n\r\n//         for (i; i < mx; ++i) uiArr[i] = binData.charCodeAt(i);\r\n\r\n//         return new myBlob([uiArr], { type: type });\r\n//     }\r\n\r\n//     function saver(url, winMode) {\r\n\r\n//         if ('download' in anchor) { //html5 A[download]\r\n//             anchor.href = url;\r\n//             anchor.setAttribute(\"download\", fileName);\r\n//             anchor.className = \"download-js-link\";\r\n//             anchor.innerHTML = \"downloading...\";\r\n//             anchor.style.display = \"none\";\r\n//             document.body.appendChild(anchor);\r\n//             setTimeout(function() {\r\n//                 anchor.click();\r\n//                 document.body.removeChild(anchor);\r\n//                 if (winMode === true) { setTimeout(function() { self.URL.revokeObjectURL(anchor.href); }, 250); }\r\n//             }, 66);\r\n//             return true;\r\n//         }\r\n\r\n//         // handle non-a[download] safari as best we can:\r\n//         if (/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\r\n//             url = url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\r\n//             if (!window.open(url)) { // popup blocked, offer direct download:\r\n//                 if (confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")) { location.href = url; }\r\n//             }\r\n//             return true;\r\n//         }\r\n\r\n//         //do iframe dataURL download (old ch+FF):\r\n//         var f = document.createElement(\"iframe\");\r\n//         document.body.appendChild(f);\r\n\r\n//         if (!winMode) { // force a mime that will download:\r\n//             url = \"data:\" + url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\r\n//         }\r\n//         f.src = url;\r\n//         setTimeout(function() { document.body.removeChild(f); }, 333);\r\n\r\n//     } //end saver\r\n\r\n\r\n\r\n\r\n//     if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\r\n//         return navigator.msSaveBlob(blob, fileName);\r\n//     }\r\n\r\n//     if (self.URL) { // simple fast and modern way using Blob and URL:\r\n//         saver(self.URL.createObjectURL(blob), true);\r\n//     } else {\r\n//         // handle non-Blob()+non-URL browsers:\r\n//         if (typeof blob === \"string\" || blob.constructor === toString) {\r\n//             try {\r\n//                 return saver(\"data:\" + mimeType + \";base64,\" + self.btoa(blob));\r\n//             } catch (y) {\r\n//                 return saver(\"data:\" + mimeType + \",\" + encodeURIComponent(blob));\r\n//             }\r\n//         }\r\n\r\n//         // Blob but not URL support:\r\n//         reader = new FileReader();\r\n//         reader.onload = function(e) {\r\n//             saver(this.result);\r\n//         };\r\n//         reader.readAsDataURL(blob);\r\n//     }\r\n//     return true;\r\n// }; /* end download() */\r\n\r\nimport download from 'downloadjs';\r\n\r\n/////////////////////////////////////////////////////////\r\n\r\nclass SVGCollector {\r\n    constructor(params = {}) {\r\n        this.container = params.container ? document.querySelector(params.container) : document;\r\n        this.name_prefix = (params.rename && params.rename.prefix) ? params.rename.prefix : '';\r\n        this.name_suffix = (params.rename && params.rename.suffix) ? params.rename.suffix : '';\r\n        this.name_ext = 'svg';\r\n        this.name_index = 0;\r\n\r\n        this.svg_elems = null;\r\n        this.svg_items = {};\r\n        // this.svg_items = [];\r\n\r\n        this.mime_type = {\r\n            svg: 'image/svg+xml'\r\n        }\r\n\r\n\r\n        this.init();\r\n    }\r\n\r\n    _collectItems() {\r\n        this.svg_elems.forEach(elem => {\r\n            let name;\r\n\r\n            if (elem.id) {\r\n                name = elem.id;\r\n            } else if (elem.classList.value !== '') {\r\n                name = elem.classList.value;\r\n            } else {\r\n                name = this.name_index++;\r\n            }\r\n\r\n            this.svg_items[this.name_prefix + name + this.name_suffix + '.' + this.name_ext] = elem.outerHTML;\r\n        });\r\n    }\r\n\r\n    downloadAll() {\r\n        for (const item in this.svg_items) {\r\n            download(this.svg_items[item], item, this.mime_type[this.name_ext])\r\n        }\r\n    }\r\n\r\n    init() {\r\n        this.svg_elems = this.container.querySelectorAll('svg');\r\n        console.log(this.svg_elems);\r\n\r\n        this._collectItems();\r\n\r\n        this.downloadAll();\r\n    }\r\n}\r\n\r\nwindow.svgCollector = new SVGCollector({\r\n    // container: '.item.first',\r\n    rename: {\r\n        // prefix: 'pref_',\r\n        // suffix: '_suf'\r\n    }\r\n});\r\n\r\n// console.log(svgCollector);","//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}